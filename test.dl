% Ordering of classes:
% C1 is a (direct or indirect) precursor of C2, if they are both
% classes, and C1 < C2
precClass(C1, C2) :- class(C1,_), class(C2,_), C1 < C2.

% C2 is not the direct successor of C1 if there is a third class C3
% between them
-succClass(C1, C2) :- precClass(C1, C3), precClass(C3, C2).

% C2 is the direct successor of C1 if C1 is any precursor of C2 and
% we do not know that C2 is not the direct successor of C1
succClass(C1, C2) :- precClass(C1, C2), not -succClass(C1, C2).

% C2 cannot be the first class if it is the (direct) successor of
% another class
-firstClass(C2) :- succClass(_, C2).

% C is the first class if it is a class and we do not know that it
% is not the first class
firstClass(C) :- class(C,_), not -firstClass(C).

% C1 cannot be the last class if it has a (direct) successor
-lastClass(C1) :- succClass(C1,_).

% C is the last class if it is a class and we do not knoe that it
% is not the last class
lastClass(C) :- class(C,_), not -lastClass(C).


% Ordering of courses:
% C1 is a (direct or indirect) precursor of C2, if they are both
% classes, and C1 < C2
precCourse(C1, C2) :- course(C1), course(C2), C1 < C2.

% C2 is not the direct successor of C1 if there is a third class C3
% between them
-succCourse(C1, C2) :- precCourse(C1, C3), precCourse(C3, C2).

% C2 is the direct successor of C1 if C1 is any precursor of C2 and
% we do not know that C2 is not the direct successor of C1
succCourse(C1, C2) :- precCourse(C1, C2), not -succCourse(C1, C2).

% C2 cannot be the first class if it is the (direct) successor of
% another class
-firstCourse(C2) :- succCourse(_, C2).

% C is the first class if it is a class and we do not know that it
% is not the first class
firstCourse(C) :- course(C), not -firstCourse(C).

% C1 cannot be the last class if it has a (direct) successor
-lastCourse(C1) :- succCourse(C1,_).

% C is the last class if it is a class and we do not knoe that it
% is not the last class
lastCourse(C) :- course(C), not -lastCourse(C).


% First, calculate the sum of lessons for each teacher and each class
% For this, we need to iterate over all courses:
% courses = S
% classes = C

% Like "teaches", we need some predicate to provide values, also for combinations that are not assigned.
hasLessonsIn(T, C, S, L) :- assigned(T, C, S), class(C, G), curriculum(G, S, L).
hasSomeLessonsIn(T, C, S) :- hasLessonsIn(T, C, S, L), L!=0.
hasLessonsIn(T, C, S, 0) :- not hasSomeLessonsIn(T, C, S), teacher(T), class(C, _), course(S). 

partialTeacherLessonsSumPerClass(T, C, S, L) :- firstCourse(S), hasLessonsIn(T, C, S, L).
partialTeacherLessonsSumPerClass(T, C, S2, L) :- succCourse(S1, S2), partialTeacherLessonsSumPerClass(T, C, S1, L1), hasLessonsIn(T, C, S2, L2), L = L1 + L2.
teacherLessonsSumPerClass(T, C, L) :- lastCourse(S), partialTeacherLessonsSumPerClass(T, C, S, L).

teacherPreparationSumPerClass(T, C, P) :- teacherLessonsSumPerClass(T, C, L), class(C, 1), P = L, #int(P).
teacherPreparationSumPerClass(T, C, P) :- teacherLessonsSumPerClass(T, C, L), class(C, 2), P = L, #int(P).
teacherPreparationSumPerClass(T, C, P) :- teacherLessonsSumPerClass(T, C, L), class(C, 3), P = L * 2.
teacherPreparationSumPerClass(T, C, P) :- teacherLessonsSumPerClass(T, C, L), class(C, 4), P = L * 2.

partialTeacherPreparationTotalSum(T, C, P) :- firstClass(C), teacherPreparationSumPerClass(T, C, P).
partialTeacherPreparationTotalSum(T, C2, P) :- succClass(C1, C2), partialTeacherPreparationTotalSum(T, C1, P1), teacherPreparationSumPerClass(T, C2, P2), P = P1 + P2.
teacherPreparationTotalSum(T, P) :- lastClass(C), partialTeacherPreparationTotalSum(T, C, P).

teaches(T, C, 1) :- assigned(T, C, _).
teaches(T, C, 0) :- not teaches(T, C, 1), teacher(T), class(C,_).

partialTeacherClassesSum(T, C, S) :- firstClass(C), teaches(T, C, S).
partialTeacherClassesSum(T, C2, S) :- succClass(C1, C2), partialTeacherClassesSum(T, C1, S1), teaches(T, C2, S2), S = S1 + S2.
teacherClassesSum(T, S) :- lastClass(C), partialTeacherClassesSum(T, C, S).

teacher(knuth).
%teacher(turing).

class(a1, 1).
class(b1, 1).
class(a2, 2).
%class(b2, 2).
%class(c2, 2).
class(a3, 3).


course(foo).
course(bar).
course(moo).
course(boo).

curriculum(1, foo, 100).
curriculum(1, bar, 10).
curriculum(1, moo, 1).
curriculum(2, foo, 5).
curriculum(2, bar, 3).
curriculum(2, moo, 1).
curriculum(3, boo, 4).

assigned(knuth, a1, foo).
assigned(knuth, a1, bar).
assigned(knuth, b1, moo).
assigned(knuth, c1, foo).
assigned(knuth, c1, bar).
assigned(knuth, c1, moo).
assigned(knuth, a3, boo).

%assigned(turing, a1,foo).
%assigned(turing, b1, foo).
%assigned(turing, c2, bar).

% We know that:
% * Teacher T is assigned to teach class C in course S
% * Class C is in grade G
% * The curriculum requires a class of grade G to receive L lessons of course S 
lessons(T, C, L) :- assigned(T, C, S), class(C, G), curriculum(G,S,L).

courseInGrade(G, S) :- curriculum(G, S, L), L!=0.
curriculum(G,S,0) :- not courseInGrade(G, S), class(_, G), course(S).
